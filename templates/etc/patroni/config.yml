scope: {{ patroni_scope }}
#namespace: /service/
name: {{ inventory_hostname }}

restapi:
  listen: 0.0.0.0:8008
  connect_address: 0.0.0.0:8008
#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem
#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key
  authentication:
    username: {{ patroni_rest_user }}
    password: {{ patroni_rest_password }}

etcd:
  host: {{ ansible_host }}:2379

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576
#    master_start_timeout: 300
#    synchronous_mode: false
    postgresql:
      use_pg_rewind: true
      use_slots: true
      parameters:
        wal_level: hot_standby
        hot_standby: "on"
        wal_keep_segments: 8
        max_wal_senders: 5
        max_connections: {{ patroni_pg_max_connections }}
        max_replication_slots: 5
        wal_log_hints: "on"

  # some desired options for 'initdb'
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
  - encoding: UTF8
  - data-checksums

  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
  - host replication replicator 10.128.0.0/32 md5
  - host replication replicator 127.0.0.1/32 md5
  - host all all 0.0.0.0/0 md5
  #- hostssl all all 0.0.0.0/0 md5

  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
# post_init: /usr/local/bin/setup_cluster.sh

  # Some additional users users which needs to be created after initializing new cluster
  users:
    admin:
      password: {{ patroni_admin_password }}
      options:
        - createrole
        - createdb

postgresql:
  listen: 0.0.0.0:{{ patroni_postgres_port }}
  connect_address: localhost:{{ patroni_postgres_port }}
  data_dir: /usr/lib/postgresql/11/{{patroni_scope}}
  bin_dir: {{patroni_pg_path}}
  pgpass: /tmp/pgpass0
  authentication:
    replication:
      username: replicator
      password: {{ patroni_replicator_password }}
    superuser:
      username: postgres
      password: {{ patroni_postgres_password }}
  parameters:
    unix_socket_directories: '.'
tags:
    nofailover: false
    noloadbalance: false
    clonefrom: false
    nosync: false
